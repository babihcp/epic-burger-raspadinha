<!DOCTYPE html><html lang="pt-br"><head>    <meta charset="UTF-8">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>Raspadinha EPIC BURGER</title>    <script src="https://cdn.tailwindcss.com"></script>    <link rel="preconnect" href="https://fonts.googleapis.com">    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@700;900&display=swap" rel="stylesheet">    <style>        body {            font-family: 'Poppins', sans-serif;            -webkit-font-smoothing: antialiased;            -moz-osx-font-smoothing: grayscale;            touch-action: none;        }        .scratch-card-container {            position: relative;            width: 100%;            max-width: 400px;            aspect-ratio: 16 / 9;            cursor: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle></svg>') 16 16, auto;        }        #prize-layer {            position: absolute;            top: 0;            left: 0;            width: 100%;            height: 100%;            z-index: 1;        }        #scratch-canvas {            position: absolute;            top: 0;            left: 0;            width: 100%;            height: 100%;            z-index: 2;            transition: opacity 0.7s ease-in-out;        }    </style></head><body class="bg-gray-900 flex items-center justify-center min-h-screen p-4">
    <div id="game-container" class="w-full max-w-md text-center">        <h1 class="text-5xl md:text-6xl font-black text-white uppercase" style="text-shadow: 0 0 10px #f59e0b, 0 0 20px #f59e0b;">            EPIC <span class="text-amber-400">BURGER</span>        </h1>        <p class="text-gray-300 mt-2 mb-6">Raspe e ganhe um prêmio épico! </p>
        <div class="scratch-card-container bg-gray-800 rounded-2xl shadow-2xl mx-auto border-4 border-gray-700">            <div id="prize-layer" class="flex flex-col items-center justify-center p-4 rounded-2xl">                <p class="text-gray-400 text-sm font-bold uppercase">Parabéns! Você ganhou:</p>                <p id="prize-text" class="text-3xl md:text-4xl font-black text-amber-400 mt-2"></p>                <div id="gemini-message-container" class="h-10 mt-2 flex items-center justify-center">                    <p id="gemini-loading" class="hidden text-amber-400 text-sm animate-pulse">Gerando sua mensagem épica...</p>                    <p id="gemini-text" class="text-base text-gray-200 font-semibold text-center px-4"></p>                </div>                <p class="text-xs text-gray-500 mt-2">Apresente esta tela no caixa para resgatar.</p>            </div>            <canvas id="scratch-canvas" class="rounded-xl"></canvas>        </div>
        <div id="result-message" class="mt-6 h-12">             <button id="redeem-button" class="hidden bg-green-500 text-white font-bold py-3 px-8 rounded-full text-lg shadow-lg hover:bg-green-600 transition-transform transform hover:scale-105">                RESGATAR PRÊMIO            </button>        </div>    </div>
    <div id="already-played" class="hidden w-full max-w-md text-center p-8 bg-gray-800 rounded-2xl shadow-2xl">         <h1 class="text-5xl font-black text-white uppercase">            EPIC <span class="text-amber-400">BURGER</span>        </h1>        <p class="text-gray-300 mt-4 text-xl">Você já participou da nossa promoção!</p>        <p class="text-gray-400 mt-2">Seu prêmio épico foi:</p>        <p id="won-prize-text" class="text-amber-400 text-3xl font-black mt-4"></p>        <p class="text-xs text-gray-500 mt-4">Apresente esta tela no caixa para resgatar.</p>    </div>

    <script>        document.addEventListener('DOMContentLoaded', () => {            const gameContainer = document.getElementById('game-container');            const alreadyPlayedContainer = document.getElementById('already-played');            const wonPrizeText = document.getElementById('won-prize-text');            const canvas = document.getElementById('scratch-canvas');            const ctx = canvas.getContext('2d', { willReadFrequently: true });            const prizeText = document.getElementById('prize-text');            const redeemButton = document.getElementById('redeem-button');            const geminiLoading = document.getElementById('gemini-loading');            const geminiText = document.getElementById('gemini-text');
            const STORAGE_KEY = 'epicBurgerScratch_v3';
            // 1. VERIFICAR SE O USUÁRIO JÁ JOGOU E QUAL FOI O PRÊMIO            const storedDataJSON = localStorage.getItem(STORAGE_KEY);            if (storedDataJSON) {                const storedData = JSON.parse(storedDataJSON);                if (storedData.played && storedData.prize) {                    wonPrizeText.textContent = storedData.prize;                    gameContainer.classList.add('hidden');                    alreadyPlayedContainer.classList.remove('hidden');                    return;                }            }
            // 2. CONFIGURAÇÃO DO JOGO            const prizes = ['30% DE DESCONTO', 'BATATA FRITA', 'UM HAMBÚRGUER'];            const chosenPrize = prizes[Math.floor(Math.random() * prizes.length)];            prizeText.textContent = chosenPrize;
            let isDrawing = false;            let gameEnded = false;
            function setupCanvas() {                const rect = canvas.parentElement.getBoundingClientRect();                canvas.width = rect.width;                canvas.height = rect.height;
                ctx.fillStyle = '#9ca3af';                ctx.fillRect(0, 0, canvas.width, canvas.height);
                ctx.font = `bold ${canvas.width / 8}px Poppins`;                ctx.fillStyle = '#4b5563';                ctx.textAlign = 'center';                ctx.textBaseline = 'middle';                ctx.fillText('RASPE AQUI', canvas.width / 2, canvas.height / 2);            }
            function getCoordinates(event) {                const rect = canvas.getBoundingClientRect();                const scaleX = canvas.width / rect.width;                const scaleY = canvas.height / rect.height;                                const clientX = event.touches ? event.touches[0].clientX : event.clientX;                const clientY = event.touches ? event.touches[0].clientY : event.clientY;
                return {                    x: (clientX - rect.left) * scaleX,                    y: (clientY - rect.top) * scaleY                };            }
            function startScratching(e) {                e.preventDefault();                isDrawing = true;                scratch(e);            }
            function stopScratching() {                isDrawing = false;                ctx.beginPath();            }
            function scratch(e) {                if (!isDrawing || gameEnded) return;                                e.preventDefault();                const coords = getCoordinates(e);
                ctx.globalCompositeOperation = 'destination-out';                ctx.beginPath();                ctx.arc(coords.x, coords.y, canvas.width / 12, 0, Math.PI * 2, true);                ctx.fill();
                checkIfRevealed();            }                        let revealTimeout;            function checkIfRevealed() {                clearTimeout(revealTimeout);                revealTimeout = setTimeout(() => {                    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);                    const pixels = imageData.data;                    let transparentPixels = 0;                        for (let i = 3; i < pixels.length; i += 4) {                        if (pixels[i] === 0) {                            transparentPixels++;                        }                    }                        const scratchedPercentage = (transparentPixels / (canvas.width * canvas.height));                        if (scratchedPercentage > 0.6) {                        revealPrize();                    }                }, 200);            }                        async function callGeminiAPI(prize) {                geminiLoading.classList.remove('hidden');                geminiText.textContent = '';                            const apiKey = "";                 const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;                            const systemPrompt = "Você é o gerente de marketing da EPIC BURGER, uma hamburgueria super animada e divertida. Sua voz é enérgica e cheia de gírias. Use exclamações e emojis quando apropriado!";                const userQuery = `Um cliente acabou de ganhar "${prize}" na nossa raspadinha! Crie uma frase de comemoração curta, épica e divertida para ele. Seja criativo e use no máximo 15 palavras.`;                            const payload = {                    contents: [{ parts: [{ text: userQuery }] }],                    systemInstruction: { parts: [{ text: systemPrompt }] },                };                            try {                    const response = await fetch(apiUrl, {                        method: 'POST',                        headers: { 'Content-Type': 'application/json' },                        body: JSON.stringify(payload)                    });                                if (response.ok) {                        const result = await response.json();                        const candidate = result.candidates?.[0];                        if (candidate && candidate.content?.parts?.[0]?.text) {                            geminiText.textContent = candidate.content.parts[0].text.replace(/"/g, '');                        } else {                           throw new Error("Resposta da API inválida.");                        }                    } else {                         throw new Error(`Erro na API: ${response.statusText}`);                    }                } catch (error) {                    geminiText.textContent = "Você é uma lenda do sabor!";                } finally {                     geminiLoading.classList.add('hidden');                }            }
            function revealPrize() {                if (gameEnded) return;                gameEnded = true;
                canvas.style.opacity = '0';                redeemButton.classList.remove('hidden');                                // 3. SALVAR O ESTADO E O PRÊMIO                const prizeData = {                    played: true,                    prize: chosenPrize                };                localStorage.setItem(STORAGE_KEY, JSON.stringify(prizeData));                                callGeminiAPI(chosenPrize);            }
            setupCanvas();            window.addEventListener('resize', setupCanvas);
            canvas.addEventListener('mousedown', startScratching);            canvas.addEventListener('mousemove', scratch);            canvas.addEventListener('mouseup', stopScratching);            canvas.addEventListener('mouseleave', stopScratching);
            canvas.addEventListener('touchstart', startScratching, { passive: false });            canvas.addEventListener('touchmove', scratch, { passive: false });            canvas.addEventListener('touchend', stopScratching);        });    </script></body></html>
